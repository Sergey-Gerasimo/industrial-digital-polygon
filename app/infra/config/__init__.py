"""Модуль инициализации и загрузки настроек приложения.

Модуль обеспечивает однократную инициализацию системы настроек и логирования
при первом импорте. Гарантирует корректную настройку логгера и валидацию
конфигурации перед использованием.

Основная функциональность:
    - Однократная загрузка настроек при старте приложения
    - Автоматическая настройка системы логирования на основе конфигурации
    - Валидация настроек на предмет использования значений по умолчанию
    - Логирование загруженной конфигурации для отладки

Особенности:
    - Защита от повторной инициализации через глобальный флаг
    - Интеграция с системой логирования приложения
    - Валидация настроек для продакшн-окружения
    - Автоматическое применение конфигурации логирования

Примеры использования:

    Базовое использование в основном модуле приложения:
        >>> from config import settings, app_logger
        >>>
        >>> app_logger.info("Запуск приложения...")
        >>> print(f"Порт API: {settings.api.port}")
        >>> print(f"Хост БД: {settings.postgres.host}")

    Использование в FastAPI приложении:
        >>> from fastapi import FastAPI
        >>> from config import settings, app_logger
        >>>
        >>> app = FastAPI(title="My App")
        >>>
        >>> @app.on_event("startup")
        >>> async def startup_event():
        ...     app_logger.info(f"Приложение запущено на {settings.api.host}:{settings.api.port}")
        >>>
        >>> @app.get("/")
        >>> async def root():
        ...     app_logger.info("Обработан запрос к корневому эндпоинту")
        ...     return {"message": "Hello World"}

    Проверка настроек вручную:
        >>> from config import settings
        >>>
        >>> # Проверка использования значений по умолчанию
        >>> settings.validate_default_values()
        >>>
        >>> # Получение URL для подключения к БД
        >>> db_url = settings.postgres.url_asyncpg
        >>> print(f"URL базы данных: {db_url}")

    Работа с логгером:
        >>> from config import app_logger
        >>>
        >>> app_logger.debug("Отладочное сообщение")
        >>> app_logger.info("Информационное сообщение")
        >>> app_logger.warning("Предупреждение")
        >>> app_logger.error("Ошибка")
        >>> app_logger.critical("Критическая ошибка")

Настройки загружаются из переменных окружения и конфигурационных файлов
согласно настройкам pydantic-settings. Валидация помогает выявить
потенциально опасные конфигурации для продакшн-окружения.

Version: 1.0.0
"""

from .settings import settings
from .log_settings import app_logger, LoggerConfig

SETTINGS_IS_LOAD = False
"""Флаг загрузки настроек приложения.

Глобальная переменная, которая предотвращает повторную инициализацию настроек
при многократном импорте модуля. Обеспечивает выполнение блока инициализации
только один раз при первом импорте.

Type:
    bool

Example:
    >>> SETTINGS_IS_LOAD
    False
    >>> # После первой инициализации становится True
"""

if not SETTINGS_IS_LOAD:
    """
    Блок инициализации настроек приложения.

    Выполняется только при первом импорте модуля. Инициализирует систему логирования
    на основе загруженных настроек и выполняет валидацию конфигурации.

    Steps:
        1. Устанавливает флаг загрузки в True
        2. Настраивает логгер согласно параметрам из settings.log
        3. Валидирует настройки на предмет использования значений по умолчанию
        4. Логирует загруженные настройки на уровне DEBUG

    Example:
        >>> # При первом импорте модуля:
        >>> # - Настраивается логгер
        >>> # - Валидируются настройки
        >>> # - Логируются настройки в DEBUG режиме
    """
    SETTINGS_IS_LOAD = True

    # Настройка системы логирования
    LoggerConfig.configure(
        log_level=settings.log.log_level,
        log_format=settings.log.log_format,
        debug=settings.log.debug,
    )

    settings.validate_default_values(logger=app_logger)
    """Проверяет настройки на использование значений по умолчанию.
    
    Выводит предупреждения в логгер если обнаружены настройки с значениями
    по умолчанию, которые должны быть изменены в продакшн-окружении.
    
    Args:
        logger: Логгер для вывода предупреждений (app_logger)
    
    See Also:
        settings.validate_default_values()
    """

    # Логирование загруженных настроек
    app_logger.debug("Settings loaded:\n{}", settings.model_dump())
    """Логирует все загруженные настройки на уровне DEBUG.
    
    Полезно для отладки и проверки корректности загрузки конфигурации.
    Выводит полный дамп всех настроек в формате словаря.
    
    Args:
        message: Текст сообщения с placeholder
        settings.model_dump(): Сериализованные настройки в виде словаря
    
    Note:
        Срабатывает только при включенном DEBUG режиме или уровне DEBUG.
    """


__all__ = [
    "settings",
    "app_logger",
]
"""Список публичных объектов модуля.

Определяет какие объекты будут доступны при импорте через wildcard:
`from module import *`

Includes:
    settings: Глобальный экземпляр настроек приложения
    app_logger: Сконфигурированный логгер приложения

Example:
    >>> from . import *
    >>> # Будут доступны только settings и app_logger
    >>> settings.api.port
    8080
    >>> app_logger.info("Application started")
"""
